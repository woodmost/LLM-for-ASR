from datasets import load_dataset, Audio
from transformers import (
    WhisperForConditionalGeneration,
    WhisperProcessor,
    BertTokenizer,
    BertForMaskedLM,
    WhisperConfig,
    WhisperTokenizer,
)
import torch
import torch.nn.functional as F
import re
import jiwer
import werpy
import inflect


def init_models():
    device = "cuda" if torch.cuda.is_available() else "cpu"
    whisper_model = WhisperForConditionalGeneration.from_pretrained(
        "openai/whisper-small"
    ).to(device)
    whisper_processor = WhisperProcessor.from_pretrained("openai/whisper-small")
    whisper_tokenizer = WhisperTokenizer.from_pretrained("openai/whisper-small")

    bert_tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")
    bert_model = BertForMaskedLM.from_pretrained("bert-base-uncased").to(device)

    whisper_model.generation_config.output_logits = True
    bert_model.generation_config.output_logits = True
    config = WhisperConfig.from_pretrained("openai/whisper-small")
    config.return_dict_in_generate = True
    return device, whisper_model, whisper_processor, bert_tokenizer, bert_model


# Standardization
wer_standardize = jiwer.Compose(
    [
        jiwer.ToLowerCase(),
        jiwer.ExpandCommonEnglishContractions(),
        jiwer.RemoveKaldiNonWords(),
        jiwer.RemoveSpecificWords(["uh", "um", "mm"]),
        jiwer.RemoveWhiteSpace(replace_by_space=True),
        jiwer.RemoveMultipleSpaces(),
        jiwer.Strip(),
        jiwer.ReduceToListOfListOfWords(),
    ]
)


def normalize(input):
    input = werpy.normalize(input)
    input = wer_standardize(input)
    input = " ".join([" ".join(sublist) for sublist in input])
    return input


def filter_function(sample):
    return 15 <= len(sample["text"].split()) <= 30
    # return 50 <= len(sample["text"].split()) <= 100
    # return 15 <= len(sample["text"].split()) <= 100


def replace_numbers_with_words(text):
    p = inflect.engine()

    def num_to_words(match):
        number = match.group(0)
        return p.number_to_words(number)

    result = re.sub(r"\b\d+\b", num_to_words, text)
    return result


def join_words(words):
    sentence = ""
    for word in words:
        if word in {",", ".", "!", "?", ":", ";", "'"}:
            sentence += word
        else:
            if sentence and not sentence.endswith(" "):
                sentence += " "
            sentence += word
    return sentence


# close this lol
def get_punctuation_tokens():
    return [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        58,
        59,
        60,
        61,
        62,
        63,
        90,
        91,
        92,
        93,
        2963,
        44013,
        45191,
        46797,
        50256,
        50364,
        50365,
        50366,
        50367,
        50368,
        50369,
        50370,
        50371,
        50372,
        50373,
        50374,
        50375,
        50376,
        50377,
        50378,
        50379,
        50380,
        50381,
        50382,
        50383,
        50384,
        50385,
        50386,
        50387,
        50388,
        50389,
        50390,
        50391,
        50392,
        50393,
        50394,
        50395,
        50396,
        50397,
        50398,
        50399,
        50400,
        50401,
        50402,
        50403,
        50404,
        50405,
        50406,
        50407,
        50408,
        50409,
        50410,
        50411,
        50412,
        50413,
        50414,
        50415,
        50416,
        50417,
        50418,
        50419,
        50420,
        50421,
        50422,
        50423,
        50424,
        50425,
        50426,
        50427,
        50428,
        50429,
        50430,
        50431,
        50432,
        50433,
        50434,
        50435,
        50436,
        50437,
        50438,
        50439,
        50440,
        50441,
        50442,
        50443,
        50444,
        50445,
        50446,
        50447,
        50448,
        50449,
        50450,
        50451,
        50452,
        50453,
        50454,
        50455,
        50456,
        50457,
        50458,
        50459,
        50460,
        50461,
        50462,
        50463,
        50464,
        50465,
        50466,
        50467,
        50468,
        50469,
        50470,
        50471,
        50472,
        50473,
        50474,
        50475,
        50476,
        50477,
        50478,
        50479,
        50480,
        50481,
        50482,
        50483,
        50484,
        50485,
        50486,
        50487,
        50488,
        50489,
        50490,
        50491,
        50492,
        50493,
        50494,
        50495,
        50496,
        50497,
        50498,
        50499,
        50500,
        50501,
        50502,
        50503,
        50504,
        50505,
        50506,
        50507,
        50508,
        50509,
        50510,
        50511,
        50512,
        50513,
        50514,
        50515,
        50516,
        50517,
        50518,
        50519,
        50520,
        50521,
        50522,
        50523,
        50524,
        50525,
        50526,
        50527,
        50528,
        50529,
        50530,
        50531,
        50532,
        50533,
        50534,
        50535,
        50536,
        50537,
        50538,
        50539,
        50540,
        50541,
        50542,
        50543,
        50544,
        50545,
        50546,
        50547,
        50548,
        50549,
        50550,
        50551,
        50552,
        50553,
        50554,
        50555,
        50556,
        50557,
        50558,
        50559,
        50560,
        50561,
        50562,
        50563,
        50564,
        50565,
        50566,
        50567,
        50568,
        50569,
        50570,
        50571,
        50572,
        50573,
        50574,
        50575,
        50576,
        50577,
        50578,
        50579,
        50580,
        50581,
        50582,
        50583,
        50584,
        50585,
        50586,
        50587,
        50588,
        50589,
        50590,
        50591,
        50592,
        50593,
        50594,
        50595,
        50596,
        50597,
        50598,
        50599,
        50600,
        50601,
        50602,
        50603,
        50604,
        50605,
        50606,
        50607,
        50608,
        50609,
        50610,
        50611,
        50612,
        50613,
        50614,
        50615,
        50616,
        50617,
        50618,
        50619,
        50620,
        50621,
        50622,
        50623,
        50624,
        50625,
        50626,
        50627,
        50628,
        50629,
        50630,
        50631,
        50632,
        50633,
        50634,
        50635,
        50636,
        50637,
        50638,
        50639,
        50640,
        50641,
        50642,
        50643,
        50644,
        50645,
        50646,
        50647,
        50648,
        50649,
        50650,
        50651,
        50652,
        50653,
        50654,
        50655,
        50656,
        50657,
        50658,
        50659,
        50660,
        50661,
        50662,
        50663,
        50664,
        50665,
        50666,
        50667,
        50668,
        50669,
        50670,
        50671,
        50672,
        50673,
        50674,
        50675,
        50676,
        50677,
        50678,
        50679,
        50680,
        50681,
        50682,
        50683,
        50684,
        50685,
        50686,
        50687,
        50688,
        50689,
        50690,
        50691,
        50692,
        50693,
        50694,
        50695,
        50696,
        50697,
        50698,
        50699,
        50700,
        50701,
        50702,
        50703,
        50704,
        50705,
        50706,
        50707,
        50708,
        50709,
        50710,
        50711,
        50712,
        50713,
        50714,
        50715,
        50716,
        50717,
        50718,
        50719,
        50720,
        50721,
        50722,
        50723,
        50724,
        50725,
        50726,
        50727,
        50728,
        50729,
        50730,
        50731,
        50732,
        50733,
        50734,
        50735,
        50736,
        50737,
        50738,
        50739,
        50740,
        50741,
        50742,
        50743,
        50744,
        50745,
        50746,
        50747,
        50748,
        50749,
        50750,
        50751,
        50752,
        50753,
        50754,
        50755,
        50756,
        50757,
        50758,
        50759,
        50760,
        50761,
        50762,
        50763,
        50764,
        50765,
        50766,
        50767,
        50768,
        50769,
        50770,
        50771,
        50772,
        50773,
        50774,
        50775,
        50776,
        50777,
        50778,
        50779,
        50780,
        50781,
        50782,
        50783,
        50784,
        50785,
        50786,
        50787,
        50788,
        50789,
        50790,
        50791,
        50792,
        50793,
        50794,
        50795,
        50796,
        50797,
        50798,
        50799,
        50800,
        50801,
        50802,
        50803,
        50804,
        50805,
        50806,
        50807,
        50808,
        50809,
        50810,
        50811,
        50812,
        50813,
        50814,
        50815,
        50816,
        50817,
        50818,
        50819,
        50820,
        50821,
        50822,
        50823,
        50824,
        50825,
        50826,
        50827,
        50828,
        50829,
        50830,
        50831,
        50832,
        50833,
        50834,
        50835,
        50836,
        50837,
        50838,
        50839,
        50840,
        50841,
        50842,
        50843,
        50844,
        50845,
        50846,
        50847,
        50848,
        50849,
        50850,
        50851,
        50852,
        50853,
        50854,
        50855,
        50856,
        50857,
        50858,
        50859,
        50860,
        50861,
        50862,
        50863,
        50864,
        50865,
        50866,
        50867,
        50868,
        50869,
        50870,
        50871,
        50872,
        50873,
        50874,
        50875,
        50876,
        50877,
        50878,
        50879,
        50880,
        50881,
        50882,
        50883,
        50884,
        50885,
        50886,
        50887,
        50888,
        50889,
        50890,
        50891,
        50892,
        50893,
        50894,
        50895,
        50896,
        50897,
        50898,
        50899,
        50900,
        50901,
        50902,
        50903,
        50904,
        50905,
        50906,
        50907,
        50908,
        50909,
        50910,
        50911,
        50912,
        50913,
        50914,
        50915,
        50916,
        50917,
        50918,
        50919,
        50920,
        50921,
        50922,
        50923,
        50924,
        50925,
        50926,
        50927,
        50928,
        50929,
        50930,
        50931,
        50932,
        50933,
        50934,
        50935,
        50936,
        50937,
        50938,
        50939,
        50940,
        50941,
        50942,
        50943,
        50944,
        50945,
        50946,
        50947,
        50948,
        50949,
        50950,
        50951,
        50952,
        50953,
        50954,
        50955,
        50956,
        50957,
        50958,
        50959,
        50960,
        50961,
        50962,
        50963,
        50964,
        50965,
        50966,
        50967,
        50968,
        50969,
        50970,
        50971,
        50972,
        50973,
        50974,
        50975,
        50976,
        50977,
        50978,
        50979,
        50980,
        50981,
        50982,
        50983,
        50984,
        50985,
        50986,
        50987,
        50988,
        50989,
        50990,
        50991,
        50992,
        50993,
        50994,
        50995,
        50996,
        50997,
        50998,
        50999,
        51000,
        51001,
        51002,
        51003,
        51004,
        51005,
        51006,
        51007,
        51008,
        51009,
        51010,
        51011,
        51012,
        51013,
        51014,
        51015,
        51016,
        51017,
        51018,
        51019,
        51020,
        51021,
        51022,
        51023,
        51024,
        51025,
        51026,
        51027,
        51028,
        51029,
        51030,
        51031,
        51032,
        51033,
        51034,
        51035,
        51036,
        51037,
        51038,
        51039,
        51040,
        51041,
        51042,
        51043,
        51044,
        51045,
        51046,
        51047,
        51048,
        51049,
        51050,
        51051,
        51052,
        51053,
        51054,
        51055,
        51056,
        51057,
        51058,
        51059,
        51060,
        51061,
        51062,
        51063,
        51064,
        51065,
        51066,
        51067,
        51068,
        51069,
        51070,
        51071,
        51072,
        51073,
        51074,
        51075,
        51076,
        51077,
        51078,
        51079,
        51080,
        51081,
        51082,
        51083,
        51084,
        51085,
        51086,
        51087,
        51088,
        51089,
        51090,
        51091,
        51092,
        51093,
        51094,
        51095,
        51096,
        51097,
        51098,
        51099,
        51100,
        51101,
        51102,
        51103,
        51104,
        51105,
        51106,
        51107,
        51108,
        51109,
        51110,
        51111,
        51112,
        51113,
        51114,
        51115,
        51116,
        51117,
        51118,
        51119,
        51120,
        51121,
        51122,
        51123,
        51124,
        51125,
        51126,
        51127,
        51128,
        51129,
        51130,
        51131,
        51132,
        51133,
        51134,
        51135,
        51136,
        51137,
        51138,
        51139,
        51140,
        51141,
        51142,
        51143,
        51144,
        51145,
        51146,
        51147,
        51148,
        51149,
        51150,
        51151,
        51152,
        51153,
        51154,
        51155,
        51156,
        51157,
        51158,
        51159,
        51160,
        51161,
        51162,
        51163,
        51164,
        51165,
        51166,
        51167,
        51168,
        51169,
        51170,
        51171,
        51172,
        51173,
        51174,
        51175,
        51176,
        51177,
        51178,
        51179,
        51180,
        51181,
        51182,
        51183,
        51184,
        51185,
        51186,
        51187,
        51188,
        51189,
        51190,
        51191,
        51192,
        51193,
        51194,
        51195,
        51196,
        51197,
        51198,
        51199,
        51200,
        51201,
        51202,
        51203,
        51204,
        51205,
        51206,
        51207,
        51208,
        51209,
        51210,
        51211,
        51212,
        51213,
        51214,
        51215,
        51216,
        51217,
        51218,
        51219,
        51220,
        51221,
        51222,
        51223,
        51224,
        51225,
        51226,
        51227,
        51228,
        51229,
        51230,
        51231,
        51232,
        51233,
        51234,
        51235,
        51236,
        51237,
        51238,
        51239,
        51240,
        51241,
        51242,
        51243,
        51244,
        51245,
        51246,
        51247,
        51248,
        51249,
        51250,
        51251,
        51252,
        51253,
        51254,
        51255,
        51256,
        51257,
        51258,
        51259,
        51260,
        51261,
        51262,
        51263,
        51264,
        51265,
        51266,
        51267,
        51268,
        51269,
        51270,
        51271,
        51272,
        51273,
        51274,
        51275,
        51276,
        51277,
        51278,
        51279,
        51280,
        51281,
        51282,
        51283,
        51284,
        51285,
        51286,
        51287,
        51288,
        51289,
        51290,
        51291,
        51292,
        51293,
        51294,
        51295,
        51296,
        51297,
        51298,
        51299,
        51300,
        51301,
        51302,
        51303,
        51304,
        51305,
        51306,
        51307,
        51308,
        51309,
        51310,
        51311,
        51312,
        51313,
        51314,
        51315,
        51316,
        51317,
        51318,
        51319,
        51320,
        51321,
        51322,
        51323,
        51324,
        51325,
        51326,
        51327,
        51328,
        51329,
        51330,
        51331,
        51332,
        51333,
        51334,
        51335,
        51336,
        51337,
        51338,
        51339,
        51340,
        51341,
        51342,
        51343,
        51344,
        51345,
        51346,
        51347,
        51348,
        51349,
        51350,
        51351,
        51352,
        51353,
        51354,
        51355,
        51356,
        51357,
        51358,
        51359,
        51360,
        51361,
        51362,
        51363,
        51364,
        51365,
        51366,
        51367,
        51368,
        51369,
        51370,
        51371,
        51372,
        51373,
        51374,
        51375,
        51376,
        51377,
        51378,
        51379,
        51380,
        51381,
        51382,
        51383,
        51384,
        51385,
        51386,
        51387,
        51388,
        51389,
        51390,
        51391,
        51392,
        51393,
        51394,
        51395,
        51396,
        51397,
        51398,
        51399,
        51400,
        51401,
        51402,
        51403,
        51404,
        51405,
        51406,
        51407,
        51408,
        51409,
        51410,
        51411,
        51412,
        51413,
        51414,
        51415,
        51416,
        51417,
        51418,
        51419,
        51420,
        51421,
        51422,
        51423,
        51424,
        51425,
        51426,
        51427,
        51428,
        51429,
        51430,
        51431,
        51432,
        51433,
        51434,
        51435,
        51436,
        51437,
        51438,
        51439,
        51440,
        51441,
        51442,
        51443,
        51444,
        51445,
        51446,
        51447,
        51448,
        51449,
        51450,
        51451,
        51452,
        51453,
        51454,
        51455,
        51456,
        51457,
        51458,
        51459,
        51460,
        51461,
        51462,
        51463,
        51464,
        51465,
        51466,
        51467,
        51468,
        51469,
        51470,
        51471,
        51472,
        51473,
        51474,
        51475,
        51476,
        51477,
        51478,
        51479,
        51480,
        51481,
        51482,
        51483,
        51484,
        51485,
        51486,
        51487,
        51488,
        51489,
        51490,
        51491,
        51492,
        51493,
        51494,
        51495,
        51496,
        51497,
        51498,
        51499,
        51500,
        51501,
        51502,
        51503,
        51504,
        51505,
        51506,
        51507,
        51508,
        51509,
        51510,
        51511,
        51512,
        51513,
        51514,
        51515,
        51516,
        51517,
        51518,
        51519,
        51520,
        51521,
        51522,
        51523,
        51524,
        51525,
        51526,
        51527,
        51528,
        51529,
        51530,
        51531,
        51532,
        51533,
        51534,
        51535,
        51536,
        51537,
        51538,
        51539,
        51540,
        51541,
        51542,
        51543,
        51544,
        51545,
        51546,
        51547,
        51548,
        51549,
        51550,
        51551,
        51552,
        51553,
        51554,
        51555,
        51556,
        51557,
        51558,
        51559,
        51560,
        51561,
        51562,
        51563,
        51564,
        51565,
        51566,
        51567,
        51568,
        51569,
        51570,
        51571,
        51572,
        51573,
        51574,
        51575,
        51576,
        51577,
        51578,
        51579,
        51580,
        51581,
        51582,
        51583,
        51584,
        51585,
        51586,
        51587,
        51588,
        51589,
        51590,
        51591,
        51592,
        51593,
        51594,
        51595,
        51596,
        51597,
        51598,
        51599,
        51600,
        51601,
        51602,
        51603,
        51604,
        51605,
        51606,
        51607,
        51608,
        51609,
        51610,
        51611,
        51612,
        51613,
        51614,
        51615,
        51616,
        51617,
        51618,
        51619,
        51620,
        51621,
        51622,
        51623,
        51624,
        51625,
        51626,
        51627,
        51628,
        51629,
        51630,
        51631,
        51632,
        51633,
        51634,
        51635,
        51636,
        51637,
        51638,
        51639,
        51640,
        51641,
        51642,
        51643,
        51644,
        51645,
        51646,
        51647,
        51648,
        51649,
        51650,
        51651,
        51652,
        51653,
        51654,
        51655,
        51656,
        51657,
        51658,
        51659,
        51660,
        51661,
        51662,
        51663,
        51664,
        51665,
        51666,
        51667,
        51668,
        51669,
        51670,
        51671,
        51672,
        51673,
        51674,
        51675,
        51676,
        51677,
        51678,
        51679,
        51680,
        51681,
        51682,
        51683,
        51684,
        51685,
        51686,
        51687,
        51688,
        51689,
        51690,
        51691,
        51692,
        51693,
        51694,
        51695,
        51696,
        51697,
        51698,
        51699,
        51700,
        51701,
        51702,
        51703,
        51704,
        51705,
        51706,
        51707,
        51708,
        51709,
        51710,
        51711,
        51712,
        51713,
        51714,
        51715,
        51716,
        51717,
        51718,
        51719,
        51720,
        51721,
        51722,
        51723,
        51724,
        51725,
        51726,
        51727,
        51728,
        51729,
        51730,
        51731,
        51732,
        51733,
        51734,
        51735,
        51736,
        51737,
        51738,
        51739,
        51740,
        51741,
        51742,
        51743,
        51744,
        51745,
        51746,
        51747,
        51748,
        51749,
        51750,
        51751,
        51752,
        51753,
        51754,
        51755,
        51756,
        51757,
        51758,
        51759,
        51760,
        51761,
        51762,
        51763,
        51764,
        51765,
        51766,
        51767,
        51768,
        51769,
        51770,
        51771,
        51772,
        51773,
        51774,
        51775,
        51776,
        51777,
        51778,
        51779,
        51780,
        51781,
        51782,
        51783,
        51784,
        51785,
        51786,
        51787,
        51788,
        51789,
        51790,
        51791,
        51792,
        51793,
        51794,
        51795,
        51796,
        51797,
        51798,
        51799,
        51800,
        51801,
        51802,
        51803,
        51804,
        51805,
        51806,
        51807,
        51808,
        51809,
        51810,
        51811,
        51812,
        51813,
        51814,
        51815,
        51816,
        51817,
        51818,
        51819,
        51820,
        51821,
        51822,
        51823,
        51824,
        51825,
        51826,
        51827,
        51828,
        51829,
        51830,
        51831,
        51832,
        51833,
        51834,
        51835,
        51836,
        51837,
        51838,
        51839,
        51840,
        51841,
        51842,
        51843,
        51844,
        51845,
        51846,
        51847,
        51848,
        51849,
        51850,
        51851,
        51852,
        51853,
        51854,
        51855,
        51856,
        51857,
        51858,
        51859,
        51860,
        51861,
        51862,
        51863,
        51864,
    ]


def _process_logits(logits):
    normalized_probs = [F.softmax(logit) for logit in logits]
    max_prob_per_token = [torch.max(probs).item() for probs in normalized_probs]
    return max_prob_per_token


def load_and_filter_data():
    dataset = load_dataset("edinburghcstr/edacc")
    dataset = dataset.cast_column("audio", Audio(sampling_rate=16_000))
    filtered_dataset = dataset.filter(filter_function)
    sampled_dataset = (
        filtered_dataset["test"].shuffle().select(range(10))
    )  # .select(range(10))
    return sampled_dataset


def process_and_predict(
    data,
    whisper_model,
    whisper_processor,
    bert_tokenizer,
    bert_model,
    device,
):
    predictions = []
    references = []

    for batch in data:
        waveform = batch["audio"]["array"]
        sampling_rate = batch["audio"]["sampling_rate"]

        audio_input = whisper_processor(
            waveform, sampling_rate=sampling_rate, return_tensors="pt"
        ).input_features

        audio_input = audio_input.to(device)

        with torch.no_grad():  ## output is a dictionary with keys ['sequences', 'logits', 'past_key_values']. we only care about the first two
            output = whisper_model.generate(
                input_features=audio_input,
                generation_config=whisper_model.generation_config,
                task="transcribe",
                language="english",
                return_dict_in_generate=True,
            )

        to_modify = output["sequences"]
        batch_probs = [_process_logits(logits) for logits in output["logits"]]
        uncertain_tokens = [
            index
            for index, prob in enumerate(batch_probs)
            if prob[0] < 0.5 and to_modify[0][index] not in get_punctuation_tokens()
        ]

        for index in uncertain_tokens:
            to_modify[0][index] = 50360

        raw_transcript = whisper_processor.batch_decode(
            to_modify, skip_special_tokens=False
        )[0]
        to_remove = [
            "<|startoftranscript|>",
            "<|translate|>",
            "<|en|>",
            "<|transcribe|>",
            "<|notimestamps|>",
            "<|endoftext|>",
            "<|startoflm|>",
        ]
        for substring in to_remove:
            if substring == "<|startoflm|>":
                raw_transcript = raw_transcript.replace(substring, " [MASK]")
            else:
                raw_transcript = raw_transcript.replace(substring, "")

        # print("Raw Transcript:", raw_transcript)

        bert_input = bert_tokenizer(raw_transcript, return_tensors="pt").to(device)
        with torch.no_grad():
            predictions_bert = bert_model(**bert_input).logits

        for idx in (bert_input.input_ids == bert_tokenizer.mask_token_id)[0].nonzero(
            as_tuple=True
        )[0]:
            predicted_token_id = predictions_bert[0, idx].argmax(axis=-1)
            predicted_word = bert_tokenizer.decode(predicted_token_id).replace(" ", "")

            raw_transcript = raw_transcript.replace("[MASK]", predicted_word, 1)

        corrected_transcription = raw_transcript

        # print("Corrected transcription:", normalize(corrected_transcription))
        # print("Reference: ", normalize(batch["text"]))

        predictions.append(normalize(corrected_transcription))
        references.append(normalize(batch["text"]))

    return predictions, references


def compute_metrics(predictions, references):
    return {
        "WER": jiwer.wer(references, predictions) * 100,
        "WIL": jiwer.wil(references, predictions) * 100,
        "MER": jiwer.mer(references, predictions) * 100,
    }


def main():
    data = load_and_filter_data()
    device, whisper_model, whisper_processor, bert_tokenizer, bert_model = init_models()
    predictions, references = process_and_predict(
        data,
        whisper_model,
        whisper_processor,
        bert_tokenizer,
        bert_model,
        device,
    )
    metrics = compute_metrics(predictions, references)
    print(metrics)


if __name__ == "__main__":
    main()


## Old process_and_predict:
#     inputs = whisper_processor(
#         batch["audio"]["array"], return_tensors="pt", sampling_rate=16000
#     )
#     input_features = inputs.input_features.to(device)

#     output = whisper_model.generate(
#         input_features,
#         task="transcribe",
#         language="english",
#         use_cache=True,
#         output_scores=True,
#         return_dict_in_generate=True,
#     )

#     transcription = whisper_processor.batch_decode(
#         output.sequences, skip_special_tokens=True
#     )[0]
#     transcription = normalize(transcription)
#     transcription = replace_numbers_with_words(transcription)
#     print("Original transcription:", transcription)

#     tokens = whisper_processor.tokenizer.tokenize(transcription)
#     tokens = [token.replace("Ġ", "") for token in tokens]

#     print("Tokens:", tokens)

#     try:
#         scores = [
#             torch.softmax(output.scores[i], dim=-1)
#             .max(dim=-1)
#             .values.cpu()
#             .numpy()[0]
#             for i in range(len(tokens))
#         ]
#     except IndexError:
#         continue

#     print("Scores:", scores)

#     uncertain_tokens = [i for i, score in enumerate(scores) if score < 0.5]
#     for idx in uncertain_tokens:
#         tokens[idx] = "[MASK]"
#     masked_transcription = join_words(tokens)
#     print("Masked transcription:", masked_transcription)

#     bert_input = bert_tokenizer(masked_transcription, return_tensors="pt").to(
#         device
#     )
#     with torch.no_grad():
#         predictions_bert = bert_model(**bert_input).logits

#     for idx in (bert_input.input_ids == bert_tokenizer.mask_token_id)[0].nonzero(
#         as_tuple=True
#     )[0]:
#         idx = idx.item() - 1
#         try:
#             predicted_token_id = predictions_bert[0, idx + 1].argmax(axis=-1)
#             tokens[idx] = bert_tokenizer.decode(predicted_token_id).replace(" ", "")
#         except IndexError:
#             continue
#     corrected_transcription = join_words(tokens)
#     print("Corrected transcription:", corrected_transcription)

#     print("Reference: ", normalize(batch["text"]))

#     predictions.append(normalize(corrected_transcription))
#     references.append(normalize(batch["text"]))

# return predictions, references
